<?php
/**
 * –°–∏—Å—Ç–µ–º–∞ –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ—Å—Ç—ñ –¥–ª—è AdBoard Pro
 * –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–æ–≤: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk), –†—É—Å—Å–∫–∏–π (ru), English (en)
 */

class Language {
    private static $instance = null;
    private $currentLanguage = 'uk';
    private $availableLanguages = ['uk', 'ru', 'en'];
    private $translations = [];
    private $fallbackLanguage = 'uk';
    
    /**
     * Singleton pattern
     */
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     */
    private function __construct() {
        $this->initializeLanguage();
        $this->loadTranslations();
    }
    
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–≤–∏
     */
    private function initializeLanguage() {
        // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: GET –ø–∞—Ä–∞–º–µ—Ç—Ä > –°–µ—Å—ñ—è > Cookies > –ë—Ä–∞—É–∑–µ—Ä > Fallback
        
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ GET –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (isset($_GET['lang']) && in_array($_GET['lang'], $this->availableLanguages)) {
            $this->currentLanguage = $_GET['lang'];
            $_SESSION['language'] = $this->currentLanguage;
            setcookie('language', $this->currentLanguage, time() + (365 * 24 * 60 * 60), '/');
            return;
        }
        
        // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é
        if (isset($_SESSION['language']) && in_array($_SESSION['language'], $this->availableLanguages)) {
            $this->currentLanguage = $_SESSION['language'];
            return;
        }
        
        // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ cookies
        if (isset($_COOKIE['language']) && in_array($_COOKIE['language'], $this->availableLanguages)) {
            $this->currentLanguage = $_COOKIE['language'];
            $_SESSION['language'] = $this->currentLanguage;
            return;
        }
        
        // 4. –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑ –±—Ä–∞—É–∑–µ—Ä–∞
        $browserLang = $this->detectBrowserLanguage();
        if ($browserLang && in_array($browserLang, $this->availableLanguages)) {
            $this->currentLanguage = $browserLang;
            $_SESSION['language'] = $this->currentLanguage;
            setcookie('language', $this->currentLanguage, time() + (365 * 24 * 60 * 60), '/');
            return;
        }
        
        // 5. Fallback
        $this->currentLanguage = $this->fallbackLanguage;
    }
    
    /**
     * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    private function detectBrowserLanguage() {
        if (!isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {
            return null;
        }
        
        $langs = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);
        
        foreach ($langs as $lang) {
            $lang = trim(explode(';', $lang)[0]);
            $lang = substr($lang, 0, 2); // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–¥ –º–æ–≤–∏
            
            switch ($lang) {
                case 'uk':
                    return 'uk';
                case 'ru':
                    return 'ru';
                case 'en':
                    return 'en';
            }
        }
        
        return null;
    }
    
    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
     */
    private function loadTranslations() {
        $langFile = __DIR__ . "/../languages/{$this->currentLanguage}.php";
        
        if (file_exists($langFile)) {
            $this->translations = include $langFile;
        } else {
            // Fallback –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
            $fallbackFile = __DIR__ . "/../languages/{$this->fallbackLanguage}.php";
            if (file_exists($fallbackFile)) {
                $this->translations = include $fallbackFile;
            }
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
     */
    public function get($key, $params = []) {
        $value = $this->getNestedValue($this->translations, $key);
        
        if ($value === null) {
            // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ fallback –º–æ–≤–∏
            $fallbackFile = __DIR__ . "/../languages/{$this->fallbackLanguage}.php";
            if (file_exists($fallbackFile) && $this->currentLanguage !== $this->fallbackLanguage) {
                $fallbackTranslations = include $fallbackFile;
                $value = $this->getNestedValue($fallbackTranslations, $key);
            }
            
            // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á
            if ($value === null) {
                return $key;
            }
        }
        
        // –ü—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (!empty($params)) {
            foreach ($params as $param => $paramValue) {
                $value = str_replace(':' . $param, $paramValue, $value);
            }
        }
        
        return $value;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—É
     */
    private function getNestedValue($array, $key) {
        $keys = explode('.', $key);
        $value = $array;
        
        foreach ($keys as $k) {
            if (!isset($value[$k])) {
                return null;
            }
            $value = $value[$k];
        }
        
        return $value;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
     */
    public function getCurrentLanguage() {
        return $this->currentLanguage;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
     */
    public function getAvailableLanguages() {
        return $this->availableLanguages;
    }
    
    /**
     * –ó–º—ñ–Ω–∞ –º–æ–≤–∏
     */
    public function setLanguage($language) {
        if (in_array($language, $this->availableLanguages)) {
            $this->currentLanguage = $language;
            $_SESSION['language'] = $language;
            setcookie('language', $language, time() + (365 * 24 * 60 * 60), '/');
            $this->loadTranslations();
            return true;
        }
        return false;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏
     */
    public function getLanguageName($code = null) {
        $code = $code ?: $this->currentLanguage;
        
        $names = [
            'uk' => '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'ru' => '–†—É—Å—Å–∫–∏–π',
            'en' => 'English'
        ];
        
        return $names[$code] ?? $code;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–ª–∞–≥—É –º–æ–≤–∏
     */
    public function getLanguageFlag($code = null) {
        $code = $code ?: $this->currentLanguage;
        
        $flags = [
            'uk' => 'üá∫üá¶',
            'ru' => 'üá∑üá∫',
            'en' => 'üá∫üá∏'
        ];
        
        return $flags[$code] ?? 'üåê';
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è URL –∑ –º–æ–≤–æ—é
     */
    public function url($path = '', $language = null) {
        $language = $language ?: $this->currentLanguage;
        $baseUrl = rtrim(getSiteUrl(), '/');
        
        // –í–∏–¥–∞–ª—è—î–º–æ –º–æ–≤—É –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —à–ª—è—Ö—É —è–∫—â–æ –≤–æ–Ω–∞ —î
        $path = ltrim($path, '/');
        $path = preg_replace('/^(uk|ru|en)\//', '', $path);
        
        // –î–æ–¥–∞—î–º–æ –º–æ–≤—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        if ($language !== 'uk') {
            return $baseUrl . '/' . $language . '/' . $path;
        }
        
        return $baseUrl . '/' . $path;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑–≥—ñ–¥–Ω–æ –º–æ–≤–∏
     */
    public function formatDate($timestamp, $format = 'full') {
        $date = is_numeric($timestamp) ? $timestamp : strtotime($timestamp);
        
        switch ($this->currentLanguage) {
            case 'uk':
                setlocale(LC_TIME, 'uk_UA.UTF-8', 'ukrainian');
                break;
            case 'ru':
                setlocale(LC_TIME, 'ru_RU.UTF-8', 'russian');
                break;
            case 'en':
                setlocale(LC_TIME, 'en_US.UTF-8', 'english');
                break;
        }
        
        switch ($format) {
            case 'short':
                return date('d.m.Y', $date);
            case 'medium':
                return date('d.m.Y H:i', $date);
            case 'full':
                return strftime('%d %B %Y', $date);
            case 'time':
                return date('H:i', $date);
            default:
                return date($format, $date);
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª
     */
    public function formatNumber($number, $decimals = 0) {
        switch ($this->currentLanguage) {
            case 'uk':
            case 'ru':
                return number_format($number, $decimals, ',', ' ');
            case 'en':
                return number_format($number, $decimals, '.', ',');
            default:
                return number_format($number, $decimals);
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
     */
    public function formatCurrency($amount, $currency = 'UAH') {
        $formatted = $this->formatNumber($amount, 2);
        
        switch ($currency) {
            case 'UAH':
                return $formatted . ' ' . $this->get('currency.uah');
            case 'USD':
                return '$' . $formatted;
            case 'EUR':
                return '‚Ç¨' . $formatted;
            default:
                return $formatted . ' ' . $currency;
        }
    }
    
    /**
     * –ü–ª—é—Ä–∞–ª—ñ–∑–∞—Ü—ñ—è
     */
    public function plural($count, $forms) {
        $count = abs($count);
        
        switch ($this->currentLanguage) {
            case 'uk':
            case 'ru':
                // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ç–∞ —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
                if ($count % 10 == 1 && $count % 100 != 11) {
                    return $forms[0]; // 1, 21, 31...
                } elseif ($count % 10 >= 2 && $count % 10 <= 4 && ($count % 100 < 10 || $count % 100 >= 20)) {
                    return $forms[1]; // 2-4, 22-24...
                } else {
                    return $forms[2]; // 0, 5-20, 25-30...
                }
                
            case 'en':
            default:
                return $count == 1 ? $forms[0] : ($forms[1] ?? $forms[0]);
        }
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
 */
function __($key, $params = []) {
    return Language::getInstance()->get($key, $params);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª—é—Ä–∞–ª—ñ–∑–∞—Ü—ñ—ó
 */
function _n($count, $forms) {
    return Language::getInstance()->plural($count, $forms);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
 */
function _d($timestamp, $format = 'full') {
    return Language::getInstance()->formatDate($timestamp, $format);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
 */
function _c($amount, $currency = 'UAH') {
    return Language::getInstance()->formatCurrency($amount, $currency);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
 */
function getCurrentLanguage() {
    return Language::getInstance()->getCurrentLanguage();
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏
 */
function setLanguage($language) {
    return Language::getInstance()->setLanguage($language);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–Ω–æ–≥–æ URL
 */
function langUrl($path = '', $language = null) {
    return Language::getInstance()->url($path, $language);
}
?>