<?php
/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php scripts/migrate.php
 */

require_once __DIR__ . '/../vendor/autoload.php';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
\App\Core\Environment::load();

class DatabaseMigrator {
    private $db;
    private $migrationsPath;
    
    public function __construct() {
        $this->db = \App\Core\Router::getDb();
        $this->migrationsPath = __DIR__ . '/../database/migrations/';
        
        if (!is_dir($this->migrationsPath)) {
            mkdir($this->migrationsPath, 0755, true);
        }
    }
    
    public function createMigrationsTable() {
        $sql = "CREATE TABLE IF NOT EXISTS migrations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            migration VARCHAR(255) NOT NULL,
            batch INT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )";
        
        $this->db->exec($sql);
        echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞\n";
    }
    
    public function getRanMigrations() {
        $sql = "SELECT migration FROM migrations ORDER BY id";
        $stmt = $this->db->query($sql);
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }
    
    public function getPendingMigrations() {
        $files = glob($this->migrationsPath . '*.php');
        $ranMigrations = $this->getRanMigrations();
        
        $pending = [];
        foreach ($files as $file) {
            $migration = basename($file, '.php');
            if (!in_array($migration, $ranMigrations)) {
                $pending[] = $migration;
            }
        }
        
        return $pending;
    }
    
    public function runMigrations() {
        $this->createMigrationsTable();
        
        $pending = $this->getPendingMigrations();
        
        if (empty($pending)) {
            echo "‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n";
            return;
        }
        
        $batch = $this->getNextBatchNumber();
        
        foreach ($pending as $migration) {
            echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è: {$migration}\n";
            
            try {
                $this->runMigration($migration, $batch);
                echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {$migration} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n";
            } catch (Exception $e) {
                echo "‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ {$migration}: " . $e->getMessage() . "\n";
                exit(1);
            }
        }
        
        echo "üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n";
    }
    
    private function runMigration($migration, $batch) {
        $file = $this->migrationsPath . $migration . '.php';
        
        if (!file_exists($file)) {
            throw new Exception("–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$file}");
        }
        
        require_once $file;
        
        $className = $this->getMigrationClassName($migration);
        
        if (!class_exists($className)) {
            throw new Exception("–ö–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$className}");
        }
        
        $instance = new $className();
        
        if (method_exists($instance, 'up')) {
            $instance->up($this->db);
        } else {
            throw new Exception("–ú–µ—Ç–æ–¥ 'up' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∞—Å—Å–µ {$className}");
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
        $sql = "INSERT INTO migrations (migration, batch) VALUES (?, ?)";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$migration, $batch]);
    }
    
    private function getMigrationClassName($migration) {
        $parts = explode('_', $migration, 4);
        if (count($parts) < 4) {
            throw new Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {$migration}");
        }
        
        $className = '';
        for ($i = 3; $i < count($parts); $i++) {
            $className .= ucfirst($parts[$i]);
        }
        
        return $className;
    }
    
    private function getNextBatchNumber() {
        $sql = "SELECT MAX(batch) as max_batch FROM migrations";
        $stmt = $this->db->query($sql);
        $result = $stmt->fetch(\PDO::FETCH_ASSOC);
        
        return ($result['max_batch'] ?? 0) + 1;
    }
    
    public function createMigration($name) {
        $timestamp = date('Y_m_d_His');
        $filename = $timestamp . '_' . $name . '.php';
        $filepath = $this->migrationsPath . $filename;
        
        $className = $this->getClassNameFromName($name);
        
        $content = "<?php

use PDO;

class {$className} {
    public function up(\$db) {
        // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        \$sql = \"\";
        \$db->exec(\$sql);
    }
    
    public function down(\$db) {
        // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        \$sql = \"\";
        \$db->exec(\$sql);
    }
}
";
        
        file_put_contents($filepath, $content);
        echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: {$filename}\n";
    }
    
    private function getClassNameFromName($name) {
        $parts = explode('_', $name);
        $className = '';
        foreach ($parts as $part) {
            $className .= ucfirst($part);
        }
        return $className;
    }
    
    public function rollback($steps = 1) {
        $sql = "SELECT migration FROM migrations ORDER BY id DESC LIMIT ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$steps]);
        $migrations = $stmt->fetchAll(\PDO::FETCH_COLUMN);
        
        foreach ($migrations as $migration) {
            echo "üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {$migration}\n";
            
            try {
                $this->rollbackMigration($migration);
                echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {$migration} –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n";
            } catch (Exception $e) {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {$migration}: " . $e->getMessage() . "\n";
                exit(1);
            }
        }
    }
    
    private function rollbackMigration($migration) {
        $file = $this->migrationsPath . $migration . '.php';
        
        if (!file_exists($file)) {
            throw new Exception("–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$file}");
        }
        
        require_once $file;
        
        $className = $this->getMigrationClassName($migration);
        
        if (!class_exists($className)) {
            throw new Exception("–ö–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$className}");
        }
        
        $instance = new $className();
        
        if (method_exists($instance, 'down')) {
            $instance->down($this->db);
        } else {
            throw new Exception("–ú–µ—Ç–æ–¥ 'down' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∞—Å—Å–µ {$className}");
        }
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        $sql = "DELETE FROM migrations WHERE migration = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$migration]);
    }
    
    public function status() {
        $this->createMigrationsTable();
        
        $ranMigrations = $this->getRanMigrations();
        $pendingMigrations = $this->getPendingMigrations();
        
        echo "üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:\n\n";
        
        if (!empty($ranMigrations)) {
            echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:\n";
            foreach ($ranMigrations as $migration) {
                echo "  - {$migration}\n";
            }
            echo "\n";
        }
        
        if (!empty($pendingMigrations)) {
            echo "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:\n";
            foreach ($pendingMigrations as $migration) {
                echo "  - {$migration}\n";
            }
            echo "\n";
        }
        
        if (empty($ranMigrations) && empty($pendingMigrations)) {
            echo "üìÅ –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$command = $argv[1] ?? 'run';

$migrator = new DatabaseMigrator();

switch ($command) {
    case 'run':
        $migrator->runMigrations();
        break;
    case 'create':
        $name = $argv[2] ?? null;
        if (!$name) {
            echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: php scripts/migrate.php create migration_name\n";
            exit(1);
        }
        $migrator->createMigration($name);
        break;
    case 'rollback':
        $steps = (int)($argv[2] ?? 1);
        $migrator->rollback($steps);
        break;
    case 'status':
        $migrator->status();
        break;
    default:
        echo "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n";
        echo "  php scripts/migrate.php run          - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏\n";
        echo "  php scripts/migrate.php create name  - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é\n";
        echo "  php scripts/migrate.php rollback [n] - –æ—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–≥—Ä–∞—Ü–∏–π\n";
        echo "  php scripts/migrate.php status       - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π\n";
        break;
}