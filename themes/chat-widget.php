<!-- Chat Widget -->
<div id="chatWidget" class="chat-widget">
    <!-- Chat Toggle Button -->
    <div id="chatToggle" class="chat-toggle">
        <div class="chat-toggle-content">
            <div class="chat-icon">
                <i class="fas fa-comments"></i>
            </div>
            <div class="chat-badge" id="chatBadge" style="display: none;">
                <span id="chatBadgeCount">0</span>
            </div>
        </div>
        <div class="chat-toggle-text">
            <span>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</span>
        </div>
    </div>

    <!-- Chat Window -->
    <div id="chatWindow" class="chat-window" style="display: none;">
        <!-- Chat Header -->
        <div class="chat-header">
            <div class="chat-header-info">
                <div class="chat-avatar">
                    <img src="/images/support-avatar.png" alt="Support" onerror="this.style.display='none'">
                    <i class="fas fa-headset"></i>
                </div>
                <div class="chat-header-text">
                    <h6>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ AdBoard Pro</h6>
                    <small class="text-success">
                        <i class="fas fa-circle online-indicator"></i>
                        –û–Ω–ª–∞–π–Ω
                    </small>
                </div>
            </div>
            <div class="chat-header-actions">
                <button class="btn btn-sm btn-ghost" id="chatMinimize">
                    <i class="fas fa-minus"></i>
                </button>
                <button class="btn btn-sm btn-ghost" id="chatClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <!-- Chat Messages -->
        <div class="chat-messages" id="chatMessages">
            <div class="chat-welcome">
                <div class="welcome-message">
                    <div class="welcome-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="welcome-text">
                        <h6>–í—ñ—Ç–∞—î–º–æ –≤ AdBoard Pro! üëã</h6>
                        <p>–Ø–∫ –º–∏ –º–æ–∂–µ–º–æ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?</p>
                    </div>
                </div>
                
                <!-- Quick Questions -->
                <div class="quick-questions">
                    <button class="quick-question-btn" data-question="–Ø–∫ –ø–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?">
                        <i class="fas fa-bullhorn"></i>
                        –Ø–∫ –ø–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?
                    </button>
                    <button class="quick-question-btn" data-question="–ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é">
                        <i class="fas fa-user-plus"></i>
                        –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é
                    </button>
                    <button class="quick-question-btn" data-question="–ü–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏">
                        <i class="fas fa-credit-card"></i>
                        –ü–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏
                    </button>
                    <button class="quick-question-btn" data-question="–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞">
                        <i class="fas fa-cog"></i>
                        –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
                    </button>
                </div>
            </div>

            <!-- Messages will be loaded here -->
            <div id="chatMessagesList"></div>
        </div>

        <!-- Chat Input -->
        <div class="chat-input">
            <form id="chatForm">
                <div class="chat-input-group">
                    <input 
                        type="text" 
                        id="chatMessageInput" 
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..." 
                        autocomplete="off"
                        maxlength="500"
                    >
                    <button type="submit" class="chat-send-btn" id="chatSendBtn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
                <div class="chat-input-actions">
                    <small class="text-muted">
                        <span id="typingIndicator" style="display: none;">
                            <i class="fas fa-circle typing-dot"></i>
                            <i class="fas fa-circle typing-dot"></i>
                            <i class="fas fa-circle typing-dot"></i>
                            –ê–≥–µ–Ω—Ç –¥—Ä—É–∫—É—î...
                        </span>
                    </small>
                    <div class="chat-actions">
                        <button type="button" class="btn btn-sm btn-ghost" id="chatAttach" title="–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-ghost" id="chatEmoji" title="–ï–º–æ–¥–∑—ñ">
                            <i class="fas fa-smile"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Chat Status -->
        <div class="chat-status" id="chatStatus">
            <div class="chat-connection-status">
                <span class="status-indicator" id="connectionStatus">
                    <i class="fas fa-circle text-success"></i>
                    –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ
                </span>
            </div>
        </div>
    </div>
</div>

<style>
.chat-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.chat-toggle {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 50px;
    padding: 15px 20px;
    cursor: pointer;
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 10px;
    color: white;
    max-width: 250px;
    position: relative;
}

.chat-toggle:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.chat-toggle-content {
    position: relative;
    display: flex;
    align-items: center;
}

.chat-icon {
    font-size: 20px;
}

.chat-badge {
    position: absolute;
    top: -8px;
    right: -8px;
    background: #ff4757;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 11px;
    font-weight: bold;
}

.chat-toggle-text {
    font-weight: 500;
    white-space: nowrap;
}

.chat-window {
    position: absolute;
    bottom: 80px;
    right: 0;
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    animation: chatSlideUp 0.3s ease;
}

@keyframes chatSlideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.chat-header-info {
    display: flex;
    align-items: center;
    gap: 12px;
}

.chat-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.chat-avatar img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
}

.chat-avatar i {
    font-size: 18px;
}

.chat-header-text h6 {
    margin: 0;
    font-weight: 600;
    font-size: 14px;
}

.chat-header-text small {
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 5px;
}

.online-indicator {
    font-size: 8px;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

.chat-header-actions {
    display: flex;
    gap: 5px;
}

.btn-ghost {
    background: transparent;
    border: none;
    color: white;
    padding: 5px;
    border-radius: 4px;
    cursor: pointer;
    opacity: 0.8;
    transition: opacity 0.2s;
}

.btn-ghost:hover {
    opacity: 1;
    background: rgba(255, 255, 255, 0.1);
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 0;
    background: #f8f9fa;
}

.chat-welcome {
    padding: 20px;
    background: white;
    border-bottom: 1px solid #eee;
}

.welcome-message {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
}

.welcome-avatar {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 16px;
}

.welcome-text h6 {
    margin: 0 0 5px 0;
    font-weight: 600;
    color: #333;
    font-size: 14px;
}

.welcome-text p {
    margin: 0;
    color: #666;
    font-size: 13px;
}

.quick-questions {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.quick-question-btn {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 10px 12px;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 13px;
    color: #495057;
    display: flex;
    align-items: center;
    gap: 8px;
}

.quick-question-btn:hover {
    background: #e9ecef;
    border-color: #667eea;
    color: #667eea;
}

.quick-question-btn i {
    color: #667eea;
    width: 16px;
}

.chat-message {
    margin-bottom: 15px;
    display: flex;
    align-items: flex-start;
    gap: 8px;
    padding: 0 15px;
}

.chat-message.user {
    flex-direction: row-reverse;
}

.chat-message.user .message-content {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 18px 18px 4px 18px;
}

.chat-message.agent .message-content {
    background: white;
    color: #333;
    border: 1px solid #e9ecef;
    border-radius: 18px 18px 18px 4px;
}

.message-avatar {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    flex-shrink: 0;
}

.message-content {
    max-width: 250px;
    padding: 10px 15px;
    font-size: 13px;
    line-height: 1.4;
    word-wrap: break-word;
}

.message-time {
    font-size: 11px;
    color: #999;
    margin-top: 5px;
    text-align: center;
}

.chat-input {
    padding: 15px;
    background: white;
    border-top: 1px solid #e9ecef;
}

.chat-input-group {
    display: flex;
    align-items: center;
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 25px;
    padding: 5px;
}

.chat-input-group input {
    flex: 1;
    border: none;
    background: transparent;
    padding: 8px 15px;
    font-size: 14px;
    outline: none;
}

.chat-send-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s;
}

.chat-send-btn:hover {
    transform: scale(1.05);
}

.chat-send-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.chat-input-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 8px;
}

.chat-actions {
    display: flex;
    gap: 5px;
}

.chat-actions .btn-ghost {
    color: #666;
    font-size: 14px;
}

.typing-indicator {
    display: flex;
    align-items: center;
    gap: 3px;
}

.typing-dot {
    font-size: 6px;
    animation: typingPulse 1.4s infinite;
}

.typing-dot:nth-child(2) { animation-delay: 0.2s; }
.typing-dot:nth-child(3) { animation-delay: 0.4s; }

@keyframes typingPulse {
    0%, 60%, 100% { opacity: 0.3; }
    30% { opacity: 1; }
}

.chat-status {
    background: #f8f9fa;
    padding: 8px 15px;
    border-top: 1px solid #e9ecef;
    font-size: 11px;
}

.status-indicator {
    display: flex;
    align-items: center;
    gap: 5px;
    color: #666;
}

.chat-messages::-webkit-scrollbar {
    width: 4px;
}

.chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
}

.chat-messages::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 2px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .chat-widget {
        bottom: 10px;
        right: 10px;
    }
    
    .chat-window {
        width: 300px;
        height: 450px;
        bottom: 70px;
    }
    
    .chat-toggle {
        padding: 12px 16px;
    }
    
    .chat-toggle-text {
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    .chat-window {
        width: calc(100vw - 20px);
        height: 400px;
        right: 10px;
    }
}
</style>

<script>
class ChatWidget {
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.unreadCount = 0;
        this.isTyping = false;
        this.connectionStatus = 'connected';
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.loadChatHistory();
        this.startHeartbeat();
    }
    
    bindEvents() {
        // Toggle chat
        document.getElementById('chatToggle').addEventListener('click', () => {
            this.toggleChat();
        });
        
        // Close chat
        document.getElementById('chatClose').addEventListener('click', () => {
            this.closeChat();
        });
        
        // Minimize chat
        document.getElementById('chatMinimize').addEventListener('click', () => {
            this.minimizeChat();
        });
        
        // Send message
        document.getElementById('chatForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.sendMessage();
        });
        
        // Quick questions
        document.querySelectorAll('.quick-question-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const question = e.currentTarget.dataset.question;
                this.sendQuickQuestion(question);
            });
        });
        
        // Input events
        const input = document.getElementById('chatMessageInput');
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        input.addEventListener('input', () => {
            this.handleTyping();
        });
    }
    
    toggleChat() {
        const chatWindow = document.getElementById('chatWindow');
        const chatToggle = document.getElementById('chatToggle');
        
        if (this.isOpen) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }
    
    openChat() {
        document.getElementById('chatWindow').style.display = 'flex';
        document.getElementById('chatToggle').style.display = 'none';
        this.isOpen = true;
        this.markAllAsRead();
        
        // Focus input
        setTimeout(() => {
            document.getElementById('chatMessageInput').focus();
        }, 300);
    }
    
    closeChat() {
        document.getElementById('chatWindow').style.display = 'none';
        document.getElementById('chatToggle').style.display = 'flex';
        this.isOpen = false;
    }
    
    minimizeChat() {
        this.closeChat();
    }
    
    sendMessage() {
        const input = document.getElementById('chatMessageInput');
        const message = input.value.trim();
        
        if (!message) return;
        
        // Add user message
        this.addMessage('user', message);
        input.value = '';
        
        // Send to server
        this.sendToServer(message);
        
        // Simulate agent response (for demo)
        setTimeout(() => {
            this.simulateAgentResponse(message);
        }, 1000 + Math.random() * 2000);
    }
    
    sendQuickQuestion(question) {
        // Hide quick questions
        document.querySelector('.quick-questions').style.display = 'none';
        
        // Send message
        this.addMessage('user', question);
        this.sendToServer(question);
        
        // Simulate response
        setTimeout(() => {
            this.simulateAgentResponse(question);
        }, 1500);
    }
    
    addMessage(type, content, timestamp = null) {
        const messagesContainer = document.getElementById('chatMessagesList');
        const messageTime = timestamp || new Date().toLocaleTimeString('uk-UA', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${type}`;
        messageDiv.innerHTML = `
            <div class="message-avatar">
                ${type === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-headset"></i>'}
            </div>
            <div>
                <div class="message-content">${this.escapeHtml(content)}</div>
                <div class="message-time">${messageTime}</div>
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
        
        // Update unread count if chat is closed
        if (!this.isOpen && type === 'agent') {
            this.unreadCount++;
            this.updateBadge();
        }
        
        this.messages.push({
            type,
            content,
            timestamp: new Date().toISOString()
        });
    }
    
    simulateAgentResponse(userMessage) {
        this.showTyping(true);
        
        setTimeout(() => {
            this.showTyping(false);
            
            let response = this.getAutoResponse(userMessage);
            this.addMessage('agent', response);
        }, 1000 + Math.random() * 1000);
    }
    
    getAutoResponse(message) {
        const responses = {
            '–Ø–∫ –ø–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?': '–î–ª—è –ø–æ–¥–∞—á—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –º–µ–Ω—é. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è: –Ω–∞–∑–≤—É, –æ–ø–∏—Å, —Ü—ñ–Ω—É, –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ. –ü—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.',
            '–ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é': '–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–≥–æ email —Ç–∞ –ø–∞—Ä–æ–ª—è. –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤. –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –¥–ª—è –ª–∏—Å—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
            '–ü–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏': '–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å: –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–º, –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–≤–µ—Ä—Ö—É, —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—à—ñ. –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ —É —Ä–æ–∑–¥—ñ–ª—ñ "–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è".',
            '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞': '–ù–∞—à–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–∞—Ü—é—î —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ. –û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —ñ –º–∏ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –¥–æ–ø–æ–º–æ–∂–µ–º–æ —ó—ó –≤–∏—Ä—ñ—à–∏—Ç–∏.'
        };
        
        // –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º
        for (const [key, value] of Object.entries(responses)) {
            if (message.toLowerCase().includes(key.toLowerCase()) || 
                key.toLowerCase().includes(message.toLowerCase())) {
                return value;
            }
        }
        
        // –ü–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º
        const keywords = {
            '–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è': '–©–æ–± –ø–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ —Å–∞–π—Ç—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è". –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É —Ç–∞ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.',
            '—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è': '–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –º–µ–Ω—é. –í–≤–µ–¥—ñ—Ç—å email, –ø–∞—Ä–æ–ª—å —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π email.',
            '–ø–∞—Ä–æ–ª—å': '–Ø–∫—â–æ –∑–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?" –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤—Ö–æ–¥—É. –ú–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞ –≤–∞—à email.',
            '–æ–ø–ª–∞—Ç–∞': '–ú–∏ –ø—Ä–∏–π–º–∞—î–º–æ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–∫–∞–º–∏ Visa/Mastercard, PayPal —Ç–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º–∏ –ø–µ—Ä–µ–∫–∞–∑–∞–º–∏.',
            '–º–æ–¥–µ—Ä–∞—Ü—ñ—è': '–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–∞–∑–≤–∏—á–∞–π –∑–∞–π–º–∞—î –¥–æ 24 –≥–æ–¥–∏–Ω. –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —Å–∞–π—Ç—É.',
            '–≤–∏–¥–∞–ª–∏—Ç–∏': '–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É "–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è.',
        };
        
        for (const [keyword, response] of Object.entries(keywords)) {
            if (message.toLowerCase().includes(keyword)) {
                return response;
            }
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const defaultResponses = [
            '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à –∞–≥–µ–Ω—Ç —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è.',
            '–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–º—É —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É. –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞.',
            '–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –ó–∞—Ä–∞–∑ –∑–Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –Ω–∞–π–∫—Ä–∞—â—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.',
            '–û–¥–Ω—É —Ö–≤–∏–ª–∏–Ω–∫—É, –ø–µ—Ä–µ–≤—ñ—Ä—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤–∞—Å...'
        ];
        
        return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    }
    
    showTyping(show) {
        const indicator = document.getElementById('typingIndicator');
        indicator.style.display = show ? 'flex' : 'none';
        this.isTyping = show;
    }
    
    handleTyping() {
        // TODO: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä—É–∫—É–≤–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }
    
    scrollToBottom() {
        const messages = document.getElementById('chatMessages');
        messages.scrollTop = messages.scrollHeight;
    }
    
    markAllAsRead() {
        this.unreadCount = 0;
        this.updateBadge();
    }
    
    updateBadge() {
        const badge = document.getElementById('chatBadge');
        const count = document.getElementById('chatBadgeCount');
        
        if (this.unreadCount > 0) {
            count.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount;
            badge.style.display = 'flex';
        } else {
            badge.style.display = 'none';
        }
    }
    
    sendToServer(message) {
        // TODO: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket –∞–±–æ AJAX
        fetch('/ajax/chat-support.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'send_message',
                message: message,
                timestamp: new Date().toISOString()
            })
        }).catch(error => {
            console.error('Error sending message:', error);
        });
    }
    
    loadChatHistory() {
        // TODO: –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    startHeartbeat() {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.checkConnection();
        }, 30000);
    }
    
    checkConnection() {
        const statusIndicator = document.getElementById('connectionStatus');
        
        fetch('/ajax/chat-support.php?action=ping')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.updateConnectionStatus('connected');
                } else {
                    this.updateConnectionStatus('disconnected');
                }
            })
            .catch(() => {
                this.updateConnectionStatus('disconnected');
            });
    }
    
    updateConnectionStatus(status) {
        const statusIndicator = document.getElementById('connectionStatus');
        
        if (status === 'connected') {
            statusIndicator.innerHTML = '<i class="fas fa-circle text-success"></i> –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        } else {
            statusIndicator.innerHTML = '<i class="fas fa-circle text-danger"></i> –ù–µ–º–∞—î –∑\'—î–¥–Ω–∞–Ω–Ω—è';
        }
        
        this.connectionStatus = status;
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    window.chatWidget = new ChatWidget();
});
</script>